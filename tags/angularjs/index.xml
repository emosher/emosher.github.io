<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>angularjs on emosher.dev</title><link>https://emosher.dev/tags/angularjs/</link><description>Recent content in angularjs on emosher.dev</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 20 Sep 2014 23:29:37 +0000</lastBuildDate><atom:link href="https://emosher.dev/tags/angularjs/index.xml" rel="self" type="application/rss+xml"/><item><title>Local Storage to Production</title><link>https://emosher.dev/posts/local-storage-to-production/</link><pubDate>Sat, 20 Sep 2014 23:29:37 +0000</pubDate><guid>https://emosher.dev/posts/local-storage-to-production/</guid><description>Some of the javascript projects I&amp;rsquo;ve worked on never left the prototype phase, but others have made it into some form of production. Every once in a while, I encounter something that causes major ripple effects within my frontend code.
What I encountered recently was the difference between synchronous and asynchronous. While the difference is often obvious, it can be easy to overlook.
LocalStorage is Synchronous! Enter localStorage. I sometimes see apps that are in the prototype phase using local storage as a way to store data.</description></item><item><title>Building Smarter Directives #2</title><link>https://emosher.dev/posts/building-smarter-directives-2/</link><pubDate>Wed, 25 Jun 2014 22:29:53 +0000</pubDate><guid>https://emosher.dev/posts/building-smarter-directives-2/</guid><description>My last post talked about conditionally loading templates using ng-include.
I spent a good amount of time using this, but found it to be problematic because it was causing my HTML to become bloated. Instead of adding to the div soup, I set out to find a better way.
This leads to nested divs:
&amp;lt;div ng-include=&amp;#34;contentUrl&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; Renders something like this:
&amp;lt;div ng-include=&amp;#34;contentUrl&amp;#34;&amp;gt; &amp;lt;div&amp;gt; This is the template &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; As it turned out, there are options!</description></item><item><title>Building Smarter Directives</title><link>https://emosher.dev/posts/building-smarter-directives/</link><pubDate>Thu, 15 May 2014 22:30:18 +0000</pubDate><guid>https://emosher.dev/posts/building-smarter-directives/</guid><description>I&amp;rsquo;ve been working a lot with AngularJS directives recently.
If you are not familiar with AngularJS or directives, head over to the AngularJS tutorial and developer guide to get up to speed.
Template vs. TemplateUrl If you are like me, you like to keep HTML out of your JavaScript. When I&amp;rsquo;m writing my directives, I almost always keep templates in seperate HTML files rather than using inline templates (see below for an example).</description></item><item><title>AngularJS App Walkthrough</title><link>https://emosher.dev/posts/angularjs-app-walkthrough/</link><pubDate>Thu, 01 May 2014 23:32:24 +0000</pubDate><guid>https://emosher.dev/posts/angularjs-app-walkthrough/</guid><description>While preparing to give a talk, I built a simple step by step application with AngularJS. The steps are there to show some of the features of Angular, and how an application might progress through development.
When I was learning Angular (around 1.0), what I found to be the most lacking was practical examples. I hope it helps those that are learning the &amp;ldquo;Angular way.&amp;rdquo;
Jawa The application renders information about open source projects, links to the project Github page, and renders the project&amp;rsquo;s Readme document in the browser.</description></item></channel></rss>